From 6c4a3e053446eb6baa27fe4e24d2a35eb3f3025e Mon Sep 17 00:00:00 2001
From: Samuel Cabrero <scabrero@zentyal.com>
Date: Wed, 6 Nov 2013 17:29:30 +0100
Subject: [PATCH] Test guest access in domain member environment

---
 source3/selftest/tests.py    |   3 +-
 source4/torture/unix/guest.c | 185 ++++++++++++++++++++++++++-----------------
 2 files changed, 116 insertions(+), 72 deletions(-)

diff --git a/source3/selftest/tests.py b/source3/selftest/tests.py
index 01c5cae..e8a08d9 100755
--- a/source3/selftest/tests.py
+++ b/source3/selftest/tests.py
@@ -312,7 +312,8 @@ for t in tests:
             plansmbtorture4testsuite(t, env, '//$SERVER/tmp -k yes -U$DC_USERNAME@$REALM%$DC_PASSWORD --option=torture:addc=$DC_SERVER', description='kerberos connection')
             plansmbtorture4testsuite(t, env, '//$SERVER/tmpguest -U% --option=torture:addc=$DC_SERVER', description='anonymous connection')
     elif t == "unix.guest":
-        plansmbtorture4testsuite(t, "plugin_s4_dc", '//$SERVER/tmpguest -U$USERNAME%$PASSWORD')
+        for env in ["plugin_s4_dc", "s3member"]:
+            plansmbtorture4testsuite(t, env, '//$SERVER/tmpguest -U$DC_USERNAME@$REALM%$DC_PASSWORD --option=torture:addc=$DC_SERVER')
     elif t == "raw.samba3posixtimedlock":
         plansmbtorture4testsuite(t, "s3dc", '//$SERVER_IP/tmpguest -U$USERNAME%$PASSWORD --option=torture:localdir=$SELFTEST_PREFIX/s3dc/share')
         plansmbtorture4testsuite(t, "plugin_s4_dc", '//$SERVER_IP/tmpguest -U$USERNAME%$PASSWORD --option=torture:localdir=$SELFTEST_PREFIX/plugin_s4_dc/share')
diff --git a/source4/torture/unix/guest.c b/source4/torture/unix/guest.c
index 16f9617..0ddb22d 100644
--- a/source4/torture/unix/guest.c
+++ b/source4/torture/unix/guest.c
@@ -19,6 +19,7 @@
 
 #include "includes.h"
 #include "torture/torture.h"
+#include "lib/cmdline/popt_common.h"
 #include "param/param.h"
 #include "ndr.h"
 #include "librpc/ndr/ndr_table.h"
@@ -91,6 +92,8 @@ static bool samr_Close(struct torture_context *tctx,
 {
 	struct samr_Close r;
 
+	torture_comment(tctx, "Closing SAMR handle\n");
+
 	r.in.handle = handle;
 	r.out.handle = handle;
 
@@ -222,6 +225,8 @@ static bool guest_acct_toggle_enabled(struct torture_context *tctx,
 	ZERO_STRUCT(domain_handle);
 	ZERO_STRUCT(user_handle);
 
+	torture_comment(tctx, "%s the guest account\n",
+			enable ? "Enabling" : "Disabling");
 	ret = samr_Connect(tctx, b, &server_handle);
 	torture_assert(tctx, ret, "Failed SAMR connect");
 
@@ -307,6 +312,8 @@ static bool guest_acct_set_password(struct torture_context *tctx,
 	DATA_BLOB session_key;
 	bool ret;
 
+	torture_comment(tctx, "Setting guest account password\n");
+
 	ZERO_STRUCT(server_handle);
 	ZERO_STRUCT(domain_handle);
 	ZERO_STRUCT(user_handle);
@@ -377,12 +384,13 @@ static NTSTATUS connect_smb(struct torture_context *tctx,
 			struct smbcli_state **cli)
 {
 	NTSTATUS status;
-
 	const char *host = torture_setting_string(tctx, "host", NULL);
 	const char *share = torture_setting_string(tctx, "share", NULL);
 	struct smbcli_options options;
 	struct smbcli_session_options session_options;
 
+	torture_comment(tctx, "Connecting to SMB host //%s/%s\n", host, share);
+
 	lpcfg_smbcli_options(tctx->lp_ctx, &options);
 	lpcfg_smbcli_session_options(tctx->lp_ctx, &session_options);
 
@@ -469,6 +477,8 @@ static bool smb_raw_query_posix_whoami(void *mem_ctx,
 	uint16_t setup = TRANSACT2_QFSINFO;
 	uint16_t info_level;
 
+	torture_comment(tctx, "Calling whoami\n");
+
 	ZERO_STRUCTP(whoami);
 
 	tp.in.max_setup = 0;
@@ -601,9 +611,9 @@ static bool smb_raw_query_posix_whoami(void *mem_ctx,
 static bool connect_ldap(struct torture_context *tctx,
 			TALLOC_CTX *mem_ctx,
 			struct cli_credentials *creds,
+			const char *host,
 			struct ldb_context **ldap)
 {
-	const char *host = torture_setting_string(tctx, "host", NULL);
 	char *uri = talloc_asprintf(mem_ctx, "ldap://%s", host);
 
 	*ldap = ldb_wrap_connect(mem_ctx, tctx->ev, tctx->lp_ctx, uri, NULL,
@@ -637,6 +647,7 @@ static bool check_guest_ldap(struct torture_context *tctx,
 			"Number of SIDs from LDAP needs to be more than 0");
 
 	if (is_dc) {
+		torture_comment(tctx, "Host is DC\n");
 		torture_assert_int_equal(tctx, el->num_values,
 				whoami->num_sids,
 				"Number of SIDs from LDAP and number of "
@@ -659,39 +670,40 @@ static bool check_guest_ldap(struct torture_context *tctx,
 			talloc_free(sid);
 		}
 	} else {
-//		unsigned int num_domain_sids_dc = 0, num_domain_sids_member = 0;
-//		struct dom_sid *user_sid = talloc(torture, struct dom_sid);
-//		struct dom_sid *dom_sid = talloc(torture, struct dom_sid);
-//		struct dom_sid *dc_sids = talloc_array(torture, struct dom_sid, el->num_values);
-//		struct dom_sid *member_sids = talloc_array(torture, struct dom_sid, whoami->num_sids);
-//		torture_assert(torture, user_sid != NULL, "talloc failed");
-//		torture_assert(torture, sid_blob_parse(el->values[0], user_sid), "sid parse failed");
-//		torture_assert_ntstatus_equal(torture, dom_sid_split_rid(torture, user_sid, &dom_sid, NULL), NT_STATUS_OK, "failed to split domain SID from user SID");
-//		for (i = 0; i < el->num_values; i++) {
-//			struct dom_sid *sid = talloc(dc_sids, struct dom_sid);
-//			torture_assert(torture, sid != NULL, "talloc failed");
-//
-//			torture_assert(torture, sid_blob_parse(el->values[i], sid), "sid parse failed");
-//			if (dom_sid_in_domain(dom_sid, sid)) {
-//				dc_sids[num_domain_sids_dc] = *sid;
-//				num_domain_sids_dc++;
-//			}
-//			talloc_free(sid);
-//		}
-//
-//		for (i = 0; i < whoami->num_sids; i++) {
-//			if (dom_sid_in_domain(dom_sid, whoami->sid_list[i])) {
-//				member_sids[num_domain_sids_member] = *whoami->sid_list[i];
-//				num_domain_sids_member++;
-//			}
-//		}
-//
-//		torture_assert_int_equal(torture, num_domain_sids_dc, num_domain_sids_member, "Number of Domain SIDs from LDAP DC and number of SIDs from CIFS member does not match!");
-//		for (i = 0; i < num_domain_sids_dc; i++) {
-//			torture_assert_str_equal(torture, dom_sid_string(dc_sids, &dc_sids[i]), dom_sid_string(member_sids, &member_sids[i]), "Domain SID from LDAP DC and SID from CIFS member server does not match!");
-//		}
-//		talloc_free(dc_sids);
-//		talloc_free(member_sids);
+		torture_comment(tctx, "Host is not DC\n");
+		unsigned int num_domain_sids_dc = 0, num_domain_sids_member = 0;
+		struct dom_sid *user_sid = talloc(mem_ctx, struct dom_sid);
+		struct dom_sid *dom_sid = talloc(mem_ctx, struct dom_sid);
+		struct dom_sid *dc_sids = talloc_array(mem_ctx, struct dom_sid, el->num_values);
+		struct dom_sid *member_sids = talloc_array(mem_ctx, struct dom_sid, whoami->num_sids);
+		torture_assert(tctx, user_sid != NULL, "talloc failed");
+		torture_assert(tctx, sid_blob_parse(el->values[0], user_sid), "sid parse failed");
+		torture_assert_ntstatus_equal(tctx, dom_sid_split_rid(mem_ctx, user_sid, &dom_sid, NULL), NT_STATUS_OK, "failed to split domain SID from user SID");
+		for (i = 0; i < el->num_values; i++) {
+			struct dom_sid *sid = talloc(dc_sids, struct dom_sid);
+			torture_assert(tctx, sid != NULL, "talloc failed");
+
+			torture_assert(tctx, sid_blob_parse(el->values[i], sid), "sid parse failed");
+			if (dom_sid_in_domain(dom_sid, sid)) {
+				dc_sids[num_domain_sids_dc] = *sid;
+				num_domain_sids_dc++;
+			}
+			talloc_free(sid);
+		}
+
+		for (i = 0; i < whoami->num_sids; i++) {
+			if (dom_sid_in_domain(dom_sid, whoami->sid_list[i])) {
+				member_sids[num_domain_sids_member] = *whoami->sid_list[i];
+				num_domain_sids_member++;
+			}
+		}
+
+		torture_assert_int_equal(tctx, num_domain_sids_dc, num_domain_sids_member, "Number of Domain SIDs from LDAP DC and number of SIDs from CIFS member does not match!");
+		for (i = 0; i < num_domain_sids_dc; i++) {
+			torture_assert_str_equal(tctx, dom_sid_string(dc_sids, &dc_sids[i]), dom_sid_string(member_sids, &member_sids[i]), "Domain SID from LDAP DC and SID from CIFS member server does not match!");
+		}
+		talloc_free(dc_sids);
+		talloc_free(member_sids);
 	}
 	return true;
 }
@@ -712,6 +724,8 @@ static bool check_guest_smb(struct torture_context *tctx,
 	ret = smb_raw_query_posix_whoami(tctx, tctx, cli, whoami);
 	torture_assert(tctx, ret, "Failed SMB_QFS_POSIX_WHOAMI");
 
+	torture_comment(tctx, "Checking SMB access tokens\n");
+
 	/* The guest flag must be enabled */
 	torture_comment(tctx, "Checking SMB_WHOAMI_GUEST flag\n");
 	ret = whoami->mapping_mask & SMB_WHOAMI_GUEST;
@@ -723,19 +737,19 @@ static bool check_guest_smb(struct torture_context *tctx,
 	torture_assert(tctx, (whoami->num_sids >= 2), "Invalid SID count");
 
 	/* The logged in user SID must be the guest SID */
-	torture_comment(tctx, "Checking logged in user SID\n");
+	torture_comment(tctx, "Checking logged in user SID is domain guest\n");
 	user_sid = whoami->sid_list[0];
 	ret = dom_sid_equal(user_sid, ctx->domain_guest_sid);
 	torture_assert(tctx, ret, "Logged in user SID is not domain guest SID");
 
 	/* The primary group of the logged in user must be Guests */
-	torture_comment(tctx, "Checking logged in user primary group SID\n");
+	torture_comment(tctx, "Checking logged in user primary group SID is domain guests\n");
 	primary_group_sid = whoami->sid_list[1];
 	ret = dom_sid_equal(primary_group_sid, ctx->domain_guests_sid);
 	torture_assert(tctx, ret, "Logged in user primary group SID is not domain guests group SID");
 
 	/* The user must not be present in the Authenticated users group but in the builtin guests */
-	torture_comment(tctx, "Checking logged in user access tokens");
+	torture_comment(tctx, "Checking logged in user access tokens\n");
 	has_builtin_guests_token = false;
 	has_builtin_users_token = false;
 
@@ -764,12 +778,10 @@ static bool build_sids(struct torture_context *tctx, TALLOC_CTX *mem_ctx,
 {
 	struct dcerpc_binding_handle *b = p->binding_handle;
 	struct policy_handle server_handle;
-	struct policy_handle domain_handle;
 	struct dom_sid2 *tmp = NULL;
 	bool ret;
 
 	ZERO_STRUCT(server_handle);
-	ZERO_STRUCT(domain_handle);
 
 	ret = samr_Connect(tctx, b, &server_handle);
 	torture_assert(tctx, ret, "Failed SAMR connect");
@@ -778,9 +790,6 @@ static bool build_sids(struct torture_context *tctx, TALLOC_CTX *mem_ctx,
 			lpcfg_workgroup(tctx->lp_ctx), &tmp);
 	torture_assert(tctx, ret, "Failed SAMR domain lookup");
 
-	ret = samr_Close(tctx, b, &domain_handle);
-	torture_assert(tctx, ret, "Failed SAMR close domain handle");
-
 	ret = samr_Close(tctx, b, &server_handle);
 	torture_assert(tctx, ret, "Failed SAMR close");
 
@@ -813,7 +822,9 @@ static bool build_sids(struct torture_context *tctx, TALLOC_CTX *mem_ctx,
 static bool check_guest(struct torture_context *tctx,
 			TALLOC_CTX *mem_ctx,
 			struct guest_test_context *ctx,
-			struct cli_credentials *creds)
+			struct cli_credentials *creds,
+			const char *addc,
+			bool is_dc)
 {
 	NTSTATUS status;
 	struct smbcli_state *cli = NULL;
@@ -829,12 +840,15 @@ static bool check_guest(struct torture_context *tctx,
 	ret = check_guest_smb(tctx, ctx, cli, whoami);
 	torture_assert(tctx, ret, "Failed guest access tokens check");
 
-	ret = connect_ldap(tctx, mem_ctx, creds, &ldap);
+	torture_comment(tctx, "Checking LDAP token groups\n");
+
+	ret = connect_ldap(tctx, mem_ctx, creds, addc, &ldap);
 	torture_assert(tctx, ret, "LDAP connection failed");
 
-	ret = check_guest_ldap(tctx, mem_ctx, ldap, true, whoami);
+	ret = check_guest_ldap(tctx, mem_ctx, ldap, is_dc, whoami);
 	torture_assert(tctx, ret, "Failed LDAP token groups check");
 	TALLOC_FREE(ldap);
+
 	TALLOC_FREE(whoami);
 	TALLOC_FREE(cli);
 
@@ -844,15 +858,25 @@ static bool check_guest(struct torture_context *tctx,
 bool torture_unix_guest(struct torture_context *tctx)
 {
 	struct dcerpc_pipe *p = NULL;
+	struct dcerpc_binding *binding = NULL;
+	char *binding_string = NULL;
 	bool ret = true;
+	bool is_dc = false;
 	char *guest_password = NULL;
+	const char *host = NULL;
+	const char *addc = NULL;
 	struct smbcli_state *cli = NULL;
 	struct cli_credentials *creds;
 	struct guest_test_context *ctx;
 	TALLOC_CTX *tmp_ctx = NULL;
 	NTSTATUS status;
 
+	addc = torture_setting_string(tctx, "addc", NULL);
+	host = torture_setting_string(tctx, "host", NULL);
+	is_dc = (strcasecmp(addc, host) == 0);
+
 	ndr_table_init();
+	dcerpc_init();
 
 	tmp_ctx = talloc_new(tctx);
 	torture_assert(tctx, tmp_ctx, "talloc_new failed");
@@ -860,9 +884,18 @@ bool torture_unix_guest(struct torture_context *tctx)
 	ctx = talloc_zero(tmp_ctx, struct guest_test_context);
 	torture_assert(tctx, ctx, "talloc_zero failed");
 
-	torture_assert_ntstatus_ok(tctx,
-			torture_rpc_connection(tctx, &p, &ndr_table_samr),
-			"RPC connection failed");
+	/* Open a RPC connection to the DC */
+	binding_string = talloc_asprintf(tmp_ctx, "ncacn_ip_tcp:%s",
+			torture_setting_string(tctx, "addc", NULL));
+	torture_assert(tctx, binding_string,
+			"Failed to build binding string");
+	status = dcerpc_parse_binding(tmp_ctx, binding_string, &binding);
+	torture_assert_ntstatus_ok(tctx, status,
+			"Failed to parse binding string");
+	status = dcerpc_pipe_connect_b(tmp_ctx, &p, binding, &ndr_table_samr,
+			cmdline_credentials, tctx->ev, tctx->lp_ctx);
+	torture_assert_ntstatus_ok(tctx, status,
+			"Failed to open RPC connection to DC");
 
 	/* Build necessary SIDs for the test */
 	ret = build_sids(tctx, tmp_ctx, p, ctx);
@@ -875,18 +908,18 @@ bool torture_unix_guest(struct torture_context *tctx)
 	torture_assert(tctx, ret, "Failed to disable guest account");
 
 	/* Try to login with an invalid user, must get logon failure */
+	torture_comment(tctx, "Trying unknown account, guest disabled\n");
 	creds = gen_creds(tctx, "UNKNOWN", "unknown", NULL);
 	status = connect_smb(tctx, tmp_ctx, creds, &cli);
-	torture_assert_ntstatus_equal(tctx, status,
-			NT_STATUS_LOGON_FAILURE, "Unexpected status code");
+	torture_assert(tctx, NT_STATUS_IS_ERR(status), "Unexpected status code");
 	TALLOC_FREE(creds);
 	TALLOC_FREE(cli);
 
 	/* Try to login with guest user, must get account disabled */
+	torture_comment(tctx, "Trying guest account, guest disabled\n");
 	creds = gen_creds(tctx, "UNKNOWN", "guest", NULL);
 	status = connect_smb(tctx, tmp_ctx, creds, &cli);
-	torture_assert_ntstatus_equal(tctx, status,
-			NT_STATUS_ACCOUNT_DISABLED, "Unexpected status code");
+	torture_assert(tctx, NT_STATUS_IS_ERR(status), "Unexpected status code");
 	TALLOC_FREE(creds);
 	TALLOC_FREE(cli);
 
@@ -895,14 +928,18 @@ bool torture_unix_guest(struct torture_context *tctx)
 	torture_assert(tctx, ret, "Failed to enable guest account");
 
 	/* Try to login with an invalid user and check the tokens */
-	creds = gen_creds(tctx, "UNKNOWN", "FOO", NULL);
-	ret = check_guest(tctx, tmp_ctx, ctx, creds);
-	torture_assert(tctx, ret, "Failed guest test");
-	TALLOC_FREE(creds);
+	if (is_dc) {
+		torture_comment(tctx, "Trying unknown account, guest enabled\n");
+		creds = gen_creds(tctx, "UNKNOWN", "FOO", NULL);
+		ret = check_guest(tctx, tmp_ctx, ctx, creds, addc, is_dc);
+		torture_assert(tctx, ret, "Failed guest test");
+		TALLOC_FREE(creds);
+	}
 
 	/* Try to login with guest user and check the tokens */
+	torture_comment(tctx, "Trying guest account, guest enabled\n");
 	creds = gen_creds(tctx, lpcfg_workgroup(tctx->lp_ctx), "guest", NULL);
-	ret = check_guest(tctx, tmp_ctx, ctx, creds);
+	ret = check_guest(tctx, tmp_ctx, ctx, creds, addc, is_dc);
 	torture_assert(tctx, ret, "Failed guest test");
 	TALLOC_FREE(creds);
 
@@ -911,31 +948,37 @@ bool torture_unix_guest(struct torture_context *tctx)
 	torture_assert(tctx, ret, "Failed to set guest account password");
 
 	/* Try to login with an invalid user (bad pwd), get logon failure */
-	creds = gen_creds(tctx, "UNKNOWN", "unknown", "bad password");
-	status = connect_smb(tctx, tmp_ctx, creds, &cli);
-	torture_assert_ntstatus_equal(tctx, status,
-			NT_STATUS_LOGON_FAILURE, "Unexpected status code");
-	TALLOC_FREE(creds);
-	TALLOC_FREE(cli);
+	if (is_dc) {
+		torture_comment(tctx, "Trying unknown account, guest enabled and bad password\n");
+		creds = gen_creds(tctx, "UNKNOWN", "unknown", "bad password");
+		status = connect_smb(tctx, tmp_ctx, creds, &cli);
+		torture_assert(tctx, NT_STATUS_IS_ERR(status), "Unexpected status code");
+		TALLOC_FREE(creds);
+		TALLOC_FREE(cli);
+	}
 
 	/* Try to login with guest user (bad pwd), get logon failure */
+	torture_comment(tctx, "Trying guest account, guest enabled and bad password\n");
 	creds = gen_creds(tctx, "UNKNOWN", "guest", "bad password");
 	status = connect_smb(tctx, tmp_ctx, creds, &cli);
-	torture_assert_ntstatus_equal(tctx, status,
-			NT_STATUS_LOGON_FAILURE, "Unexpected status code");
+	torture_assert(tctx, NT_STATUS_IS_ERR(status), "Unexpected status code");
 	TALLOC_FREE(creds);
 	TALLOC_FREE(cli);
 
 	/* Try to login with invalid user (good pwd), get ok, check guest */
-	creds = gen_creds(tctx, "UNKNOWN", "unknown", guest_password);
-	ret = check_guest(tctx, tmp_ctx, ctx, creds);
-	torture_assert(tctx, ret, "Failed guest test");
-	TALLOC_FREE(creds);
+	if (is_dc) {
+		torture_comment(tctx, "Trying unknown account, guest enabled and good password\n");
+		creds = gen_creds(tctx, "UNKNOWN", "unknown", guest_password);
+		ret = check_guest(tctx, tmp_ctx, ctx, creds, addc, is_dc);
+		torture_assert(tctx, ret, "Failed guest test");
+		TALLOC_FREE(creds);
+	}
 
 	/* Try to login with guest user (good pwd), get ok, check guest */
+	torture_comment(tctx, "Trying guest account, guest enabled and good password\n");
 	creds = gen_creds(tctx, lpcfg_workgroup(tctx->lp_ctx),
 		"guest", guest_password);
-	ret = check_guest(tctx, tmp_ctx, ctx, creds);
+	ret = check_guest(tctx, tmp_ctx, ctx, creds, addc, is_dc);
 	torture_assert(tctx, ret, "Failed guest test");
 	TALLOC_FREE(creds);
 
-- 
1.8.3.2

